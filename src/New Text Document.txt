import React, { useEffect, useRef, useState } from 'react';
import { MessageSquare, Palette, Code, Rocket, CheckCircle, RefreshCw, ChevronRight, Play } from 'lucide-react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

export default function Process() {
  const sectionRef = useRef(null);
  const titleRef = useRef(null);
  const timelineRef = useRef(null);
  const [activeStep, setActiveStep] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);

  useEffect(() => {
    const ctx = gsap.context(() => {
      // Title animation with magnetic effect
      gsap.fromTo(titleRef.current,
        { y: 80, opacity: 0, scale: 0.95, filter: 'blur(8px)' },
        {
          y: 0,
          opacity: 1,
          scale: 1,
          filter: 'blur(0px)',
          duration: 1.2,
          ease: "elastic.out(1, 0.7)",
          scrollTrigger: {
            trigger: titleRef.current,
            start: "top 85%",
            end: "bottom 20%",
            scrub: 1,
          }
        }
      );

      // Timeline line animation with dynamic progress
      gsap.fromTo(".timeline-line",
        { scaleY: 0, transformOrigin: "top" },
        {
          scaleY: 1,
          duration: 2,
          ease: "power2.out",
          scrollTrigger: {
            trigger: timelineRef.current,
            start: "top 85%",
            end: "bottom 20%",
            scrub: 1,
          }
        }
      );

      // Process steps with interactive timeline
      if (timelineRef.current?.querySelectorAll('.process-step')) {
        const steps = timelineRef.current.querySelectorAll('.process-step');
        gsap.fromTo(
          steps,
          { 
            y: 120, 
            opacity: 0, 
            scale: 0.7, 
            rotateY: 30, 
            filter: 'blur(10px)',
            transformOrigin: "center"
          },
          {
            y: 0,
            opacity: 1,
            scale: 1,
            rotateY: 0,
            filter: 'blur(0px)',
            duration: 1.1,
            stagger: {
              each: 0.18,
              from: "start"
            },
            ease: "expo.out",
            scrollTrigger: {
              trigger: timelineRef.current,
              start: "top 89%",
              end: "top+=410 90%",
              scrub: 1,
            },
            onComplete: () => {
              // Add interactive hover effects
              steps.forEach((step, index) => {
                step.addEventListener('mouseenter', () => {
                  setActiveStep(index);
                  gsap.to(step, {
                    scale: 1.05,
                    z: 20,
                    boxShadow: '0 20px 40px rgba(139, 92, 246, 0.3)',
                    duration: 0.4,
                    ease: "power2.out"
                  });
                });
                
                step.addEventListener('mouseleave', () => {
                  gsap.to(step, {
                    scale: 1,
                    z: 0,
                    boxShadow: '0 0 0px rgba(139, 92, 246, 0)',
                    duration: 0.4,
                    ease: "power2.out"
                  });
                });
              });
            }
          }
        );
      }
    }, sectionRef);

    return () => ctx.revert();
  }, []);

  // Auto-play timeline
  useEffect(() => {
    if (isPlaying) {
      const interval = setInterval(() => {
        setActiveStep((prev) => (prev + 1) % steps.length);
      }, 3000);
      return () => clearInterval(interval);
    }
  }, [isPlaying]);

  const steps = [
    {
      icon: MessageSquare,
      title: 'Discovery & Consultation',
      description: 'We start with a detailed discussion about your business, goals, target audience, and requirements.',
      duration: '1 Day',
      details: [
        'Business analysis and goal setting',
        'Target audience identification',
        'Competitor research',
        'Technical requirements gathering',
        'Timeline and budget finalization'
      ],
      color: 'from-blue-500 to-blue-600'
    },
    {
      icon: Palette,
      title: 'Design & Wireframing',
      description: 'Create visual mockups and wireframes that align with your brand and provide excellent user experience.',
      duration: '1-2 Days',
      details: [
        'Brand analysis and style guide creation',
        'Wireframe development',
        'Visual design mockups',
        'Client feedback and revisions',
        'Final design approval'
      ],
      color: 'from-purple-500 to-purple-600'
    },
    {
      icon: Code,
      title: 'Development & Build',
      description: 'Transform designs into a fully functional, responsive website using the latest technologies.',
      duration: '5-6 Days',
      details: [
        'Frontend development',
        'Backend functionality (if required)',
        'Content management system setup',
        'Payment integration (for e-commerce)',
        'SEO optimization'
      ],
      color: 'from-green-500 to-green-600'
    },
    {
      icon: RefreshCw,
      title: 'Review & Refinement',
      description: 'Thorough testing and refinement based on your feedback to ensure everything works perfectly.',
      duration: '1-2 Days',
      details: [
        'Cross-browser testing',
        'Mobile responsiveness testing',
        'Performance optimization',
        'Client review and feedback',
        'Final adjustments and polishing'
      ],
      color: 'from-orange-500 to-orange-600'
    },
    {
      icon: Rocket,
      title: 'Launch & Go Live',
      description: 'Deploy your website to the live server and ensure everything runs smoothly.',
      duration: '1 Day',
      details: [
        'Domain and hosting setup',
        'Website deployment',
        'SSL certificate installation',
        'Google Analytics setup',
        'Search engine submission'
      ],
      color: 'from-red-500 to-red-600'
    },
    {
      icon: CheckCircle,
      title: 'Support & Maintenance',
      description: 'Ongoing support to keep your website secure, updated, and performing optimally.',
      duration: 'Ongoing',
      details: [
        'Regular security updates',
        'Performance monitoring',
        'Content updates assistance',
        'Technical support',
        'Monthly performance reports'
      ],
      color: 'from-yellow-500 to-yellow-600'
    }
  ];

  return (
    <section ref={sectionRef} id="process" className="py-20 bg-black relative overflow-hidden">
      {/* Animated background */}
      <div className="absolute inset-0 opacity-5">
        <div className="absolute inset-0" style={{
          backgroundImage: `linear-gradient(45deg, transparent 40%, rgba(139, 92, 246, 0.1) 50%, transparent 60%)`,
          backgroundSize: '200px 200px',
          animation: 'slide 20s linear infinite'
        }}></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div ref={titleRef} className="text-center mb-16">
          <h2 className="text-4xl font-bold text-white mb-4">
            Our Process
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto mb-8">
            A proven, transparent process that ensures your website is delivered on time, 
            within budget, and exceeds your expectations.
          </p>
          
          {/* Interactive timeline controls */}
          <div className="flex justify-center items-center gap-4">
            <button
              onClick={() => setIsPlaying(!isPlaying)}
              className="flex items-center gap-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105"
            >
              <Play className={`h-4 w-4 ${isPlaying ? 'animate-pulse' : ''}`} />
              {isPlaying ? 'Playing Timeline' : 'Play Timeline'}
            </button>
            <div className="text-gray-400 text-sm">
              Step {activeStep + 1} of {steps.length}
            </div>
          </div>
        </div>

        <div ref={timelineRef} className="relative">
          {/* Dynamic timeline line with progress */}
          <div className="timeline-line hidden lg:block absolute left-1/2 transform -translate-x-px h-full w-1 bg-gradient-to-b from-blue-800 via-purple-800 to-blue-800 origin-top rounded-full">
            {/* Progress indicator */}
            <div 
              className="absolute top-0 left-0 w-full bg-gradient-to-b from-blue-400 to-purple-400 rounded-full transition-all duration-1000"
              style={{ height: `${((activeStep + 1) / steps.length) * 100}%` }}
            ></div>
          </div>
          
          <div className="space-y-12">
            {steps.map((step, index) => (
              <div 
                key={index} 
                className={`process-step relative lg:grid lg:grid-cols-2 lg:gap-8 items-center transition-all duration-500 ${
                  index % 2 === 0 ? '' : 'lg:grid-flow-col-dense'
                } ${index === activeStep ? 'scale-105' : ''}`}
                style={{ perspective: '1000px' }}
              >
                {/* Timeline number with glow effect */}
                <div className="hidden lg:block absolute left-1/2 transform -translate-x-1/2 -translate-y-4 z-10">
                  <div className={`bg-gradient-to-br ${step.color} text-white rounded-full w-16 h-16 flex items-center justify-center font-bold text-lg shadow-lg transition-all duration-500 ${
                    index === activeStep ? 'scale-125 shadow-2xl' : ''
                  }`}>
                    {index <= activeStep ? (
                      <CheckCircle className="h-8 w-8" />
                    ) : (
                      index + 1
                    )}
                  </div>
                </div>

                {/* Content card with enhanced styling */}
                <div className={`${index % 2 === 0 ? 'lg:text-right' : 'lg:col-start-2'}`}>
                  <div className={`bg-gray-900/80 backdrop-blur-sm border border-gray-800 rounded-2xl p-8 shadow-lg transition-all duration-500 relative overflow-hidden ${
                    index === activeStep ? 'border-blue-500/50 shadow-blue-500/20' : 'hover:border-gray-700'
                  }`}>
                    {/* Gradient overlay for active step */}
                    {index === activeStep && (
                      <div className={`absolute inset-0 bg-gradient-to-br ${step.color} opacity-5 rounded-2xl`}></div>
                    )}
                    
                    <div className={`flex items-center mb-4 relative z-10 ${index % 2 === 0 ? 'lg:justify-end' : ''}`}>
                      <div className={`bg-gradient-to-br ${step.color} w-12 h-12 rounded-lg flex items-center justify-center mr-4 shadow-lg transition-all duration-300 ${
                        index === activeStep ? 'scale-110 shadow-xl' : ''
                      }`}>
                        <step.icon className="h-6 w-6 text-white" />
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-white">{step.title}</h3>
                        <span className="text-blue-400 font-medium text-sm">{step.duration}</span>
                      </div>
                    </div>
                    
                    <p className="text-gray-300 mb-6 relative z-10">{step.description}</p>
                    
                    {/* Expandable details */}
                    <div className={`overflow-hidden transition-all duration-500 relative z-10 ${
                      index === activeStep ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
                    }`}>
                      <ul className="space-y-2 mb-4">
                        {step.details.map((detail, idx) => (
                          <li key={idx} className={`flex items-center text-sm text-gray-300 ${
                            index % 2 === 0 ? 'lg:justify-end' : ''
                          }`}>
                            <div className={`w-1.5 h-1.5 bg-blue-400 rounded-full ${
                              index % 2 === 0 ? 'lg:order-2 lg:ml-3 mr-3' : 'mr-3'
                            }`}></div>
                            <span className={index % 2 === 0 ? 'lg:text-right' : ''}>{detail}</span>
                          </li>
                        ))}
                      </ul>
                    </div>

                    {/* Progress indicator */}
                    <div className="flex items-center justify-between mt-4 relative z-10">
                      <div className={`text-sm text-gray-400 ${index % 2 === 0 ? 'lg:order-2' : ''}`}>
                        {index <= activeStep ? 'Completed' : 'Upcoming'}
                      </div>
                      <ChevronRight className={`h-4 w-4 text-gray-400 transition-transform duration-300 ${
                        index === activeStep ? 'scale-125 text-blue-400' : ''
                      } ${index % 2 === 0 ? 'lg:order-1 rotate-180' : ''}`} />
                    </div>

                    {/* Shimmer effect for active step */}
                    {index === activeStep && (
                      <div className="absolute inset-0 rounded-2xl opacity-30 pointer-events-none"
                           style={{
                             background: 'linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%)',
                             transform: 'translateX(-100%)',
                             animation: 'shimmer 2s infinite'
                           }}>
                      </div>
                    )}
                  </div>
                </div>

                {/* Mobile number badge */}
                <div className="lg:hidden flex items-center mb-4">
                  <div className={`bg-gradient-to-br ${step.color} text-white rounded-full w-8 h-8 flex items-center justify-center font-bold text-sm mr-4`}>
                    {index + 1}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Interactive CTA */}
        <div className="mt-16 text-center">
          <div className="bg-gradient-to-r from-blue-900/50 to-purple-950/50 backdrop-blur-sm rounded-2xl p-8 text-white border border-gray-800 hover:border-blue-800/50 transition-all duration-500 group">
            <h3 className="text-2xl font-bold mb-4 group-hover:scale-105 transition-transform duration-300">Ready to Get Started?</h3>
            <p className="text-blue-100 mb-6 max-w-2xl mx-auto">
              Our streamlined process ensures your project runs smoothly from start to finish. 
              Let's discuss your requirements and create something amazing together.
            </p>
            <a
              href="#contact"
              className="bg-white text-blue-900 px-8 py-3 rounded-lg hover:bg-gray-100 transition-all duration-300 font-semibold inline-block transform hover:scale-105 hover:shadow-lg"
            >
              Start Your Project
            </a>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
        @keyframes slide {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
      `}</style>
    </section>
  );
}




import React, { useEffect, useRef, useState } from 'react';
import { MapPin, DollarSign, Users, MessageCircle, Award, Clock, Star } from 'lucide-react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

export default function WhyChoose() {
  const sectionRef = useRef(null);
  const titleRef = useRef(null);
  const reasonsRef = useRef(null);
  const testimonialsRef = useRef(null);
  const [activeTestimonial, setActiveTestimonial] = useState(0);

  useEffect(() => {
    const ctx = gsap.context(() => {
      // Title animation with magnetic effect
      gsap.fromTo(titleRef.current,
        { y: 80, opacity: 0, scale: 0.95, filter: 'blur(8px)' },
        {
          y: 0,
          opacity: 1,
          scale: 1,
          filter: 'blur(0px)',
          duration: 1.2,
          ease: "elastic.out(1, 0.7)",
          scrollTrigger: {
            trigger: titleRef.current,
            start: "top 85%",
            end: "bottom 20%",
            toggleActions: "play none none reverse"
          }
        }
      );

      // Hexagonal grid layout animation
      if (reasonsRef.current?.children) {
        gsap.fromTo(
          reasonsRef.current.children,
          { 
            y: 120, 
            opacity: 0, 
            scale: 0.7, 
            rotateY: 30, 
            filter: 'blur(10px)',
            transformOrigin: "center"
          },
          {
            y: 0,
            opacity: 1,
            scale: 1,
            rotateY: 0,
            filter: 'blur(0px)',
            duration: 1.1,
            stagger: {
              each: 0.18,
              from: "center",
              grid: [3, 2]
            },
            ease: "expo.out",
            scrollTrigger: {
              trigger: reasonsRef.current,
              start: "top 85%",
              end: "bottom 20%",
              toggleActions: "play none none reverse"
            },
            onComplete: () => {
              // Add interactive hover effects
              Array.from(reasonsRef.current.children).forEach((card, index) => {
                card.addEventListener('mouseenter', () => {
                  gsap.to(card, {
                    scale: 1.1,
                    rotateY: 10,
                    z: 50,
                    boxShadow: '0 20px 40px rgba(139, 92, 246, 0.4)',
                    duration: 0.4,
                    ease: "power2.out"
                  });
                });
                
                card.addEventListener('mouseleave', () => {
                  gsap.to(card, {
                    scale: 1,
                    rotateY: 0,
                    z: 0,
                    boxShadow: '0 0 0px rgba(139, 92, 246, 0)',
                    duration: 0.4,
                    ease: "power2.out"
                  });
                });
              });
            }
          }
        );
      }

      // Testimonials carousel animation
      gsap.fromTo(testimonialsRef.current,
        { y: 120, opacity: 0, scale: 0.95, filter: 'blur(8px)' },
        {
          y: 0,
          opacity: 1,
          scale: 1,
          filter: 'blur(0px)',
          duration: 1.3,
          ease: "power4.out",
          scrollTrigger: {
            trigger: testimonialsRef.current,
            start: "top 85%",
            end: "bottom 20%",
            toggleActions: "play none none reverse"
          }
        }
      );

    }, sectionRef);

    return () => ctx.revert();
  }, []);

  // Auto-rotate testimonials
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveTestimonial((prev) => (prev + 1) % testimonials.length);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const reasons = [
    {
      icon: MapPin,
      title: 'Local Expertise',
      description: 'Deep understanding of Nagpur market dynamics, customer behavior, and local business challenges.',
      stat: '5+ Years Local Experience',
      color: 'from-blue-500 to-blue-600'
    },
    {
      icon: DollarSign,
      title: 'Affordable Pricing',
      description: 'Transparent, competitive pricing with no hidden costs. Great value for money without compromising quality.',
      stat: '30% More Affordable',
      color: 'from-green-500 to-green-600'
    },
    {
      icon: Users,
      title: 'Custom Solutions',
      description: 'No cookie-cutter templates. Every website is uniquely designed and developed for your specific needs.',
      stat: '100% Custom Designs',
      color: 'from-purple-500 to-purple-600'
    },
    {
      icon: MessageCircle,
      title: 'Clear Communication',
      description: 'Regular updates, clear timelines, and transparent communication throughout the entire project.',
      stat: '24-48hr Response Time',
      color: 'from-orange-500 to-orange-600'
    },
    {
      icon: Award,
      title: 'Proven Results',
      description: 'Track record of successful projects with measurable improvements in online presence and lead generation.',
      stat: '98% Client Satisfaction',
      color: 'from-yellow-500 to-yellow-600'
    },
    {
      icon: Clock,
      title: 'Fast Delivery',
      description: 'Efficient project management ensures your website is delivered on time without sacrificing quality.',
      stat: '2-4 Week Delivery',
      color: 'from-red-500 to-red-600'
    }
  ];

  const testimonials = [
    {
      name: 'Rajesh Sharma',
      business: 'Sharma Electronics',
      location: 'Sitabuldi, Nagpur',
      quote: 'Lumens transformed our online presence completely. Sales increased by 40% within 3 months of launching our new website.',
      rating: 5,
      image: 'https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg?auto=compress&cs=tinysrgb&w=150'
    },
    {
      name: 'Priya Deshmukh',
      business: 'Deshmukh Fashion Boutique',
      location: 'Dharampeth, Nagpur',
      quote: 'Professional, affordable, and truly understood our vision. The e-commerce site they built has revolutionized our business.',
      rating: 5,
      image: 'https://images.pexels.com/photos/1239291/pexels-photo-1239291.jpeg?auto=compress&cs=tinysrgb&w=150'
    },
    {
      name: 'Amit Patil',
      business: 'Patil Catering Services',
      location: 'Hanuman Nagar, Nagpur',
      quote: 'Excellent communication and support. They delivered exactly what we needed, on time and within budget.',
      rating: 5,
      image: 'https://images.pexels.com/photos/1222271/pexels-photo-1222271.jpeg?auto=compress&cs=tinysrgb&w=150'
    }
  ];

  return (
    <section ref={sectionRef} id="why-choose" className="py-20 bg-black relative overflow-hidden">
      {/* Animated background pattern */}
      <div className="absolute inset-0 opacity-5">
        <div className="absolute inset-0" style={{
          backgroundImage: `conic-gradient(from 0deg at 50% 50%, transparent 0deg, rgba(139, 92, 246, 0.3) 60deg, transparent 120deg)`,
          backgroundSize: '100px 100px'
        }}></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div ref={titleRef} className="text-center mb-16">
          <h2 className="text-4xl font-bold text-white mb-4">
            Why Choose Lumens?
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            We're not just another web development agency. We're your local digital partners 
            committed to your success.
          </p>
        </div>

        {/* Hexagonal grid layout for reasons */}
        <div ref={reasonsRef} className="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-20" style={{ perspective: '1000px' }}>
          {reasons.map((reason, index) => (
            <div 
              key={index} 
              className="group bg-gray-900/80 backdrop-blur-sm border border-gray-800 rounded-xl p-8 transition-all duration-500 cursor-pointer relative overflow-hidden"
              style={{
                transformStyle: 'preserve-3d',
                clipPath: index % 2 === 0 ? 'polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%)' : 'none'
              }}
            >
              {/* Gradient overlay */}
              <div className={`absolute inset-0 bg-gradient-to-br ${reason.color} opacity-0 group-hover:opacity-10 transition-opacity duration-500 rounded-xl`}></div>
              
              {/* Floating icon with color */}
              <div className={`bg-gradient-to-br ${reason.color} w-12 h-12 rounded-lg flex items-center justify-center mb-6 shadow-lg transition-all duration-300 group-hover:scale-110 group-hover:rotate-12`}>
                <reason.icon className="h-6 w-6 text-white" />
              </div>
              
              <h3 className="text-xl font-bold text-white mb-3 group-hover:text-blue-300 transition-colors duration-300">
                {reason.title}
              </h3>
              <p className="text-gray-300 mb-4 group-hover:text-gray-200 transition-colors duration-300">
                {reason.description}
              </p>
              
              {/* Animated stat badge */}
              <div className={`bg-gradient-to-r ${reason.color} bg-opacity-20 text-white px-3 py-1 rounded-full text-sm font-semibold inline-block group-hover:scale-105 transition-transform duration-300`}>
                {reason.stat}
              </div>

              {/* Hover shimmer effect */}
              <div className="absolute inset-0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none"
                   style={{
                     background: 'linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.1) 50%, transparent 70%)',
                     transform: 'translateX(-100%)',
                     animation: 'shimmer 2s infinite'
                   }}>
              </div>
            </div>
          ))}
        </div>

        {/* Interactive testimonials carousel */}
        <div ref={testimonialsRef} className="bg-gray-900/80 backdrop-blur-sm border border-gray-800 rounded-2xl shadow-xl p-8 relative overflow-hidden">
          <h3 className="text-3xl font-bold text-white text-center mb-12">
            What Our Clients Say
          </h3>
          
          {/* Testimonial content */}
          <div className="relative h-64 overflow-hidden">
            {testimonials.map((testimonial, index) => (
              <div 
                key={index}
                className={`absolute inset-0 transition-all duration-700 ${
                  index === activeTestimonial 
                    ? 'opacity-100 transform translate-x-0' 
                    : index < activeTestimonial 
                      ? 'opacity-0 transform -translate-x-full' 
                      : 'opacity-0 transform translate-x-full'
                }`}
              >
                <div className="flex flex-col md:flex-row items-center gap-8 h-full">
                  {/* Profile image */}
                  <div className="flex-shrink-0">
                    <img 
                      src={testimonial.image} 
                      alt={testimonial.name}
                      className="w-24 h-24 rounded-full object-cover border-4 border-blue-500 shadow-lg"
                    />
                  </div>
                  
                  {/* Testimonial content */}
                  <div className="flex-1 text-center md:text-left">
                    {/* Stars */}
                    <div className="flex justify-center md:justify-start items-center mb-4">
                      {[...Array(testimonial.rating)].map((_, i) => (
                        <Star key={i} className="w-5 h-5 text-yellow-400 fill-current" />
                      ))}
                    </div>
                    
                    {/* Quote */}
                    <blockquote className="text-xl text-gray-300 mb-6 italic leading-relaxed">
                      "{testimonial.quote}"
                    </blockquote>
                    
                    {/* Author info */}
                    <div>
                      <div className="font-semibold text-white text-lg">{testimonial.name}</div>
                      <div className="text-blue-400 font-medium">{testimonial.business}</div>
                      <div className="text-gray-400 text-sm">{testimonial.location}</div>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
          
          {/* Navigation dots */}
          <div className="flex justify-center mt-8 space-x-3">
            {testimonials.map((_, index) => (
              <button
                key={index}
                onClick={() => setActiveTestimonial(index)}
                className={`w-3 h-3 rounded-full transition-all duration-300 ${
                  index === activeTestimonial 
                    ? 'bg-blue-500 scale-125' 
                    : 'bg-gray-600 hover:bg-gray-500'
                }`}
              />
            ))}
          </div>
          
          {/* Progress bar */}
          <div className="absolute bottom-0 left-0 h-1 bg-blue-500 transition-all duration-300"
               style={{ width: `${((activeTestimonial + 1) / testimonials.length) * 100}%` }}>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
      `}</style>
    </section>
  );
}




import React, { useEffect, useRef, useState } from 'react';
import { Monitor, ShoppingCart, RefreshCw, Shield, Search, Smartphone, ChevronDown, ChevronUp } from 'lucide-react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

export default function Services() {
  const sectionRef = useRef(null);
  const titleRef = useRef(null);
  const servicesRef = useRef(null);
  const [expandedCard, setExpandedCard] = useState(null);

  useEffect(() => {
    const ctx = gsap.context(() => {
      // Title animation with magnetic effect
      gsap.fromTo(titleRef.current,
        { y: 80, opacity: 0, scale: 0.95, filter: 'blur(8px)' },
        {
          y: 0,
          opacity: 1,
          scale: 1,
          filter: 'blur(0px)',
          duration: 1.2,
          ease: "elastic.out(1, 0.7)",
          scrollTrigger: {
            trigger: titleRef.current,
            start: "top 85%",
            end: "bottom 20%",
            scrub: 1,
          }
        }
      );

      // Services cards with morphing grid layout
      if (servicesRef.current?.children) {
        gsap.fromTo(
          servicesRef.current.children,
          { 
            y: 120, 
            opacity: 0, 
            scale: 0.7, 
            rotateY: 30, 
            filter: 'blur(10px)',
            transformOrigin: "center bottom"
          },
          {
            y: 0,
            opacity: 1,
            scale: 1,
            rotateY: 0,
            filter: 'blur(0px)',
            duration: 1.1,
            stagger: {
              each: 0.12,
              from: "start",
              grid: "auto"
            },
            ease: "expo.out",
            scrollTrigger: {
              trigger: servicesRef.current,
              start: "top 95%",
              end: "top+=200 90%",
              scrub: 1,
            },
            onComplete: () => {
              // Add hover animations after initial load
              Array.from(servicesRef.current.children).forEach((card, index) => {
                card.addEventListener('mouseenter', () => {
                  gsap.to(card, {
                    y: -15,
                    scale: 1.05,
                    rotateY: 5,
                    boxShadow: '0 25px 50px rgba(139, 92, 246, 0.3)',
                    duration: 0.4,
                    ease: "power2.out"
                  });
                });
                
                card.addEventListener('mouseleave', () => {
                  gsap.to(card, {
                    y: 0,
                    scale: 1,
                    rotateY: 0,
                    boxShadow: '0 0 0px rgba(139, 92, 246, 0)',
                    duration: 0.4,
                    ease: "power2.out"
                  });
                });
              });
            }
          }
        );
      }
    }, sectionRef);

    return () => ctx.revert();
  }, []);

  const toggleCard = (index) => {
    setExpandedCard(expandedCard === index ? null : index);
  };

  const services = [
    {
      icon: Monitor,
      title: 'Website Design & Development',
      description: 'Custom websites built from the ground up, tailored to your brand and business goals.',
      features: ['Responsive Design', 'Modern UI/UX', 'Fast Loading', 'Mobile Optimized'],
      price: '₹15,000 - ₹45,000',
      detailedFeatures: [
        'Custom responsive design that works on all devices',
        'Modern UI/UX following latest design trends',
        'Optimized for speed and performance',
        'SEO-friendly structure and markup',
        'Content management system integration',
        'Cross-browser compatibility testing'
      ]
    },
    {
      icon: ShoppingCart,
      title: 'E-commerce Solutions',
      description: 'Complete online stores with payment integration, inventory management, and customer support.',
      features: ['Payment Gateway', 'Inventory Management', 'Order Tracking', 'Customer Portal'],
      price: '₹25,000 - ₹75,000',
      detailedFeatures: [
        'Secure payment gateway integration',
        'Real-time inventory management',
        'Order tracking and management system',
        'Customer account portal',
        'Product catalog with search and filters',
        'Analytics and reporting dashboard'
      ]
    },
    {
      icon: RefreshCw,
      title: 'Website Redesign',
      description: 'Modernize your existing website with fresh design and improved functionality.',
      features: ['Modern Design', 'Performance Boost', 'SEO Improvement', 'Content Migration'],
      price: '₹12,000 - ₹35,000',
      detailedFeatures: [
        'Complete visual redesign with modern aesthetics',
        'Performance optimization and speed improvements',
        'SEO audit and optimization',
        'Content migration and restructuring',
        'Mobile responsiveness upgrade',
        'User experience enhancement'
      ]
    },
    {
      icon: Shield,
      title: 'Maintenance & Support',
      description: 'Keep your website secure, updated, and running smoothly with our ongoing support.',
      features: ['Security Updates', '24/7 Monitoring', 'Regular Backups', 'Performance Optimization'],
      price: '₹2,500/month',
      detailedFeatures: [
        'Regular security updates and patches',
        '24/7 website monitoring and uptime tracking',
        'Automated daily backups',
        'Performance optimization and speed monitoring',
        'Content updates and modifications',
        'Technical support and troubleshooting'
      ]
    }
  ];

  return (
    <section ref={sectionRef} id="services" className="py-20 bg-black relative overflow-hidden">
      {/* Animated background grid */}
      <div className="absolute inset-0 opacity-5">
        <div className="absolute inset-0" style={{
          backgroundImage: `radial-gradient(circle at 1px 1px, rgba(255,255,255,0.3) 1px, transparent 0)`,
          backgroundSize: '50px 50px'
        }}></div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative">
        <div ref={titleRef} className="text-center mb-16">
          <h2 className="text-4xl font-bold text-white mb-4">
            Our Services
          </h2>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            Comprehensive web solutions designed specifically for local businesses. 
            From concept to launch and beyond, we've got you covered.
          </p>
        </div>

        {/* Masonry-style grid layout */}
        <div ref={servicesRef} className="grid md:grid-cols-2 lg:grid-cols-2 gap-8 auto-rows-auto">
          {services.map((service, index) => (
            <div 
              key={index} 
              className={`group bg-gray-900/80 backdrop-blur-sm border border-gray-800 rounded-2xl p-8 transition-all duration-500 cursor-pointer relative overflow-hidden ${
                index === 0 ? 'lg:row-span-2' : ''
              } ${index === 1 ? 'lg:col-start-2' : ''}`}
              onClick={() => toggleCard(index)}
              style={{
                transformStyle: 'preserve-3d',
                perspective: '1000px'
              }}
            >
              {/* Gradient overlay on hover */}
              <div className="absolute inset-0 bg-gradient-to-br from-blue-800/20 to-purple-900/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-2xl"></div>
              
              {/* Floating icon */}
              <div className="relative bg-gradient-to-br from-blue-800 to-purple-900 w-14 h-14 rounded-xl flex items-center justify-center mb-6 shadow-lg shadow-purple-900/30 group-hover:shadow-purple-900/50 transition-all duration-300">
                <service.icon className="h-7 w-7 text-white group-hover:scale-110 transition-transform duration-300" />
              </div>
              
              <h3 className="text-2xl font-bold text-white mb-4 group-hover:text-blue-300 transition-colors duration-300">
                {service.title}
              </h3>
              <p className="text-gray-300 mb-6 group-hover:text-gray-200 transition-colors duration-300">
                {service.description}
              </p>
              
              {/* Basic features */}
              <ul className="space-y-2 mb-6">
                {service.features.map((feature, idx) => (
                  <li key={idx} className="flex items-center text-sm text-gray-300 group-hover:text-gray-200 transition-colors duration-300">
                    <div className="w-1.5 h-1.5 bg-blue-400 rounded-full mr-3 group-hover:bg-blue-300 transition-colors duration-300"></div>
                    {feature}
                  </li>
                ))}
              </ul>

              {/* Expandable detailed features */}
              <div className={`overflow-hidden transition-all duration-500 ${
                expandedCard === index ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0'
              }`}>
                <div className="border-t border-gray-700 pt-4 mb-6">
                  <h4 className="text-lg font-semibold text-white mb-3">Detailed Features:</h4>
                  <ul className="space-y-2">
                    {service.detailedFeatures.map((feature, idx) => (
                      <li key={idx} className="flex items-start text-sm text-gray-300">
                        <div className="w-1.5 h-1.5 bg-purple-400 rounded-full mr-3 mt-2 flex-shrink-0"></div>
                        {feature}
                      </li>
                    ))}
                  </ul>
                </div>
              </div>
              
              {/* Footer with price and expand button */}
              <div className="border-t border-gray-800 pt-6 relative">
                <div className="flex items-center justify-between">
                  <span className="text-lg font-bold text-blue-400 group-hover:text-blue-300 transition-colors duration-300">
                    {service.price}
                  </span>
                  <div className="flex items-center gap-3">
                    <a
                      href="#contact"
                      className="bg-gradient-to-r from-blue-800 to-purple-900 text-white px-4 py-2 rounded-lg hover:from-blue-900 hover:to-purple-950 transition-all duration-300 text-sm font-semibold shadow-lg shadow-purple-900/30 hover:scale-105"
                      onClick={(e) => e.stopPropagation()}
                    >
                      Learn More
                    </a>
                    <button className="text-gray-400 hover:text-white transition-colors duration-300">
                      {expandedCard === index ? <ChevronUp className="h-5 w-5" /> : <ChevronDown className="h-5 w-5" />}
                    </button>
                  </div>
                </div>
              </div>

              {/* Hover glow effect */}
              <div className="absolute inset-0 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none"
                   style={{
                     background: 'linear-gradient(45deg, transparent 30%, rgba(139, 92, 246, 0.1) 50%, transparent 70%)',
                     transform: 'translateX(-100%)',
                     animation: 'shimmer 2s infinite'
                   }}>
              </div>
            </div>
          ))}
        </div>

        {/* Interactive CTA section */}
        <div className="mt-16 bg-gradient-to-r from-blue-900/50 to-purple-950/50 backdrop-blur-sm rounded-2xl p-8 text-center border border-gray-800 hover:border-blue-800/50 transition-all duration-500 group">
          <h3 className="text-3xl font-bold text-white mb-4 group-hover:scale-105 transition-transform duration-300">
            Need Something Custom?
          </h3>
          <p className="text-blue-100 text-lg mb-6 max-w-2xl mx-auto">
            Every business is unique. If you don't see exactly what you need, let's discuss 
            a custom solution tailored specifically for your requirements.
          </p>
          <a
            href="#contact"
            className="bg-white text-blue-900 px-8 py-3 rounded-lg hover:bg-gray-100 transition-all duration-300 font-semibold inline-block transform hover:scale-105 hover:shadow-lg"
          >
            Discuss Custom Solution
          </a>
        </div>
      </div>

      <style jsx>{`
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
      `}</style>
    </section>
  );
}




import React, { useState, useEffect, useRef } from 'react';
import { Phone, Mail, MapPin, Clock, Send, CheckCircle } from 'lucide-react';
import { gsap } from 'gsap';
import { ScrollTrigger } from 'gsap/ScrollTrigger';

gsap.registerPlugin(ScrollTrigger);

export default function Contact() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    businessType: '',
    message: ''
  });
  const [isSubmitted, setIsSubmitted] = useState(false);
  
  const sectionRef = useRef(null);
  const titleRef = useRef(null);
  const contactInfoRef = useRef(null);
  const formRef = useRef(null);

  useEffect(() => {
    const ctx = gsap.context(() => {
      // Title animation with scrub
      gsap.fromTo(titleRef.current,
        { y: 80, opacity: 0, scale: 0.95, filter: 'blur(8px)' },
        {
          y: 0,
          opacity: 1,
          scale: 1,
          filter: 'blur(0px)',
          duration: 1.2,
          ease: "elastic.out(1, 0.7)",
          scrollTrigger: {
            trigger: titleRef.current,
            start: "top 85%",
            end: "bottom 20%",
            scrub: 1,
          }
        }
      );

      // Contact info cards: staggered, 3D pop, rotate, and color flicker with scrub
      if (contactInfoRef.current?.children) {
        gsap.fromTo(
          contactInfoRef.current.children,
          { y: 120, opacity: 0, scale: 0.7, rotateY: 30, filter: 'blur(10px)' },
          {
            y: 0,
            opacity: 1,
            scale: 1,
            rotateY: 0,
            filter: 'blur(0px)',
            duration: 1.1,
            stagger: {
              each: 0.18,
              from: "center"
            },
            ease: "expo.out",
            scrollTrigger: {
              trigger: contactInfoRef.current,
              start: "top 85%",
              end: "bottom 20%",
              scrub: 1,
            },
            onStart: () => {
              // Flicker effect for the first card
              gsap.fromTo(
                contactInfoRef.current.children[0],
                { boxShadow: '0 0 0px #a78bfa' },
                { boxShadow: '0 0 32px #a78bfa', repeat: 2, yoyo: true, duration: 0.2, delay: 0.2 }
              );
            }
          }
        );
      }

      // Form animation with scrub
      gsap.fromTo(formRef.current,
        { y: 80, opacity: 0, scale: 0.95, filter: 'blur(8px)' },
        {
          y: 0,
          opacity: 1,
          scale: 1,
          filter: 'blur(0px)',
          duration: 1.2,
          ease: "elastic.out(1, 0.7)",
          scrollTrigger: {
            trigger: formRef.current,
            start: "top 85%",
            end: "bottom 20%",
            scrub: 1,
          }
        }
      );
    }, sectionRef);

    return () => ctx.revert();
  }, []);

  const handleSubmit = (e) => {
    e.preventDefault();
    // In a real application, you would send this data to your backend
    console.log('Form submitted:', formData);
    setIsSubmitted(true);
    setTimeout(() => setIsSubmitted(false), 3000);
  };

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const contactInfo = [
    {
      icon: Phone,
      title: 'Phone',
      details: '+91 98765 43210',
      subtitle: 'Mon-Sat: 9 AM - 7 PM'
    },
    {
      icon: Mail,
      title: 'Email',
      details: 'hello@lumens.agency',
      subtitle: 'We reply within 24 hours'
    },
    {
      icon: MapPin,
      title: 'Location',
      details: 'Nagpur, Maharashtra',
      subtitle: 'Serving all of Nagpur'
    },
    {
      icon: Clock,
      title: 'Business Hours',
      details: 'Mon - Sat: 9 AM - 7 PM',
      subtitle: 'Sunday: By appointment'
    }
  ];

  return (
    <section ref={sectionRef} id="contact" className="py-24 bg-gradient-to-br from-black via-gray-900 to-black min-h-screen flex items-center">
      <div className="max-w-6xl mx-auto w-full px-4 sm:px-8 lg:px-12 flex flex-col lg:flex-row gap-12 items-stretch">
        {/* Left: Contact Info & Perks */}
        <div ref={contactInfoRef} className="flex-1 flex flex-col gap-8 justify-center">
          <div className="bg-gradient-to-br from-blue-900 to-purple-950 rounded-3xl p-10 text-white shadow-2xl shadow-purple-900/30 flex flex-col gap-8 h-full">
            <div>
              <h3 className="text-3xl font-extrabold mb-3">Let's Start a Conversation</h3>
              <p className="text-blue-100 text-lg mb-6">
                We're here to help your business succeed online. Whether you need a new website, want to redesign an existing one, or have questions about our services, we'd love to hear from you.
              </p>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
              {contactInfo.map((info, index) => (
                <div key={index} className="flex items-start gap-4 bg-white/5 rounded-xl p-4 shadow-md">
                  <div className="bg-gradient-to-br from-blue-800 to-purple-900 rounded-lg p-3 flex items-center justify-center">
                    <info.icon className="h-6 w-6 text-white" />
                  </div>
                  <div>
                    <h4 className="font-semibold text-white mb-1 text-lg">{info.title}</h4>
                    <p className="text-blue-100 font-medium text-base">{info.details}</p>
                    <p className="text-blue-200 text-xs">{info.subtitle}</p>
                  </div>
                </div>
              ))}
            </div>
            <div className="flex flex-col gap-3 mt-4">
              <div className="flex items-center text-blue-200 text-base"><CheckCircle className="h-5 w-5 text-blue-400 mr-2" /> Free consultation & project quote</div>
              <div className="flex items-center text-blue-200 text-base"><CheckCircle className="h-5 w-5 text-blue-400 mr-2" /> Detailed project timeline & roadmap</div>
              <div className="flex items-center text-blue-200 text-base"><CheckCircle className="h-5 w-5 text-blue-400 mr-2" /> Custom solutions for your business</div>
              <div className="flex items-center text-blue-200 text-base"><CheckCircle className="h-5 w-5 text-blue-400 mr-2" /> Transparent pricing, no hidden costs</div>
            </div>
          </div>
        </div>

        {/* Right: Contact Form */}
        <div ref={formRef} className="flex-1 flex flex-col justify-center">
          <div className="bg-gray-900/90 border border-gray-800 rounded-3xl shadow-2xl p-10 flex flex-col gap-8 h-full">
            <div className="text-center">
              <h2 ref={titleRef} className="text-4xl font-extrabold text-white mb-2">Contact Us</h2>
              <p className="text-blue-100 text-lg mb-6 max-w-xl mx-auto">Ready to transform your online presence? Let's discuss your project and create something amazing together.</p>
            </div>
            {isSubmitted && (
              <div className="bg-blue-800/30 border border-blue-800/50 rounded-lg p-4 mb-6 text-center">
                <div className="flex items-center justify-center">
                  <CheckCircle className="h-5 w-5 text-blue-400 mr-2" />
                  <span className="text-blue-300 font-medium">
                    Thanks for your message! We'll get back to you within 24 hours.
                  </span>
                </div>
              </div>
            )}
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <label htmlFor="name" className="block text-sm font-semibold text-blue-200 mb-2">
                    Full Name *
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    required
                    value={formData.name}
                    onChange={handleChange}
                    className="w-full px-4 py-3 bg-black/80 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-800 focus:border-blue-800 transition-colors duration-300 text-white placeholder-gray-400 text-base"
                    placeholder="Your full name"
                  />
                </div>
                <div>
                  <label htmlFor="phone" className="block text-sm font-semibold text-blue-200 mb-2">
                    Phone Number
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    className="w-full px-4 py-3 bg-black/80 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-800 focus:border-blue-800 transition-colors duration-300 text-white placeholder-gray-400 text-base"
                    placeholder="+91 98765 43210"
                  />
                </div>
              </div>
              <div>
                <label htmlFor="email" className="block text-sm font-semibold text-blue-200 mb-2">
                  Email Address *
                </label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  required
                  value={formData.email}
                  onChange={handleChange}
                  className="w-full px-4 py-3 bg-black/80 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-800 focus:border-blue-800 transition-colors duration-300 text-white placeholder-gray-400 text-base"
                  placeholder="your.email@example.com"
                />
              </div>
              <div>
                <label htmlFor="businessType" className="block text-sm font-semibold text-blue-200 mb-2">
                  Business Type
                </label>
                <select
                  id="businessType"
                  name="businessType"
                  value={formData.businessType}
                  onChange={handleChange}
                  className="w-full px-4 py-3 bg-black/80 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-800 focus:border-blue-800 transition-colors duration-300 text-white text-base"
                >
                  <option value="">Select your business type</option>
                  <option value="retail">Retail Store</option>
                  <option value="restaurant">Restaurant/Food Service</option>
                  <option value="healthcare">Healthcare</option>
                  <option value="professional">Professional Services</option>
                  <option value="manufacturing">Manufacturing</option>
                  <option value="education">Education</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div>
                <label htmlFor="message" className="block text-sm font-semibold text-blue-200 mb-2">
                  Project Details *
                </label>
                <textarea
                  id="message"
                  name="message"
                  rows={5}
                  required
                  value={formData.message}
                  onChange={handleChange}
                  className="w-full px-4 py-3 bg-black/80 border border-gray-700 rounded-lg focus:ring-2 focus:ring-blue-800 focus:border-blue-800 transition-colors duration-300 text-white placeholder-gray-400 text-base"
                  placeholder="Tell us about your project, goals, and any specific requirements..."
                ></textarea>
              </div>
              <button
                type="submit"
                className="w-full bg-gradient-to-r from-blue-800 to-purple-900 text-white px-8 py-4 rounded-lg hover:from-blue-900 hover:to-purple-950 transition-all duration-300 transform hover:scale-105 font-semibold flex items-center justify-center shadow-lg shadow-purple-900/30 text-lg"
              >
                <Send className="mr-2 h-5 w-5" />
                Send Message & Get Free Quote
              </button>
            </form>
          </div>
        </div>
      </div>
    </section>
  );
}